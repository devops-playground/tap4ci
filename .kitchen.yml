---
<%
  require_relative 'spec/spec_helper'

  ANSIBLE_CHECK_MODE = \
    ENV['ANSIBLE_CHECK_MODE']&.match? /^(1|[Yy](es)?|[Tt](rue)?)$/

  SYSTEMCTL_REPLACEMENT_URL = \
   "https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement\
/master/files/docker/systemctl.py"

  SSHD_OPTS = %w[
    -o UseDNS=no
    -o UsePAM=no
    -o PasswordAuthentication=yes
    -o UsePrivilegeSeparation=no
    -o PidFile=/tmp/sshd.pid
  ]

  if ENV['container'] == 'docker' || DOCKERIZED
    require_relative 'spec/kitchen/docker/monkey_patches'

    kitchen_docker_id_rsa = ROOT / '.kitchen/docker_id_rsa'
    if File.exists?(kitchen_docker_id_rsa)
      FileUtils.chmod(0o600, kitchen_docker_id_rsa)
    end
  end
%>
driver:
  name: <%= KITCHEN_PROVIDER %>
  require_chef_omnibus: false
  platform: debian
  image: debian:stretch
  use_sudo: false
  <% if ENV.key?('HTTP_PROXY') %>
  http_proxy: <%= ENV['HTTP_PROXY'] %>
  https_proxy: <%= ENV['HTTP_PROXY'] %>
  <% end %>
  <% if DOCKERIZED %>
  run_options:
    env: container=docker
    stop-signal: SIGRTMIN+3
  run_command: /bin/systemctl start ssh
  provision_command:
    - if [ -n "${HTTP_PROXY}" ]; then
        echo "Acquire::http::Proxy \"${http_proxy}\";"
          > /etc/apt/apt.conf.d/11http-proxy
        && export http_proxy="${HTTP_PROXY}"
        && export https_proxy="${HTTP_PROXY}"
        && export HTTP_PROXY="${HTTP_PROXY}"
        && export HTTPS_PROXY="${HTTP_PROXY}" ;
      fi
    - DEBIAN_FRONTEND=noninteractive apt-get update
      && dpkg-divert --local /bin/systemctl
      && apt-get -y install ca-certificates
                            curl
                            openssh-server
                            python
                            python-apt
                            systemd
      && apt-get clean
      && apt-get -y autoremove
      && curl -q -o /tmp/systemctl https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/systemctl.py
      && install -o root -g root -m 0755 /tmp/systemctl /bin/systemctl
      && rm -rf /tmp/* /var/tmp/*
      && find /etc/systemd/system /lib/systemd/system
              -path '*.wants/*'
              -not -name '*journald*'
              -not -name '*dbus*'
              -not -name '*ssh*'
              -not -name '*pwr*'
              -not -name '*systemd-tmpfiles*'
              -not -name '*systemd-user-sessions*'
              -exec rm \{} \;
      && sed -e 's|^\(SSHD_OPTS=\).*$|\1"<%= SSHD_OPTS.join(' ') %>"|'
             -ri /etc/default/ssh
      && systemctl enable ssh
      && systemctl start ssh
  # https://github.com/test-kitchen/kitchen-docker/pull/294
  build_tempdir: .kitchen
  # https://github.com/test-kitchen/kitchen-docker/pull/283
  use_internal_docker_network: true
  <% else %>
  provision_command:
    - DEBIAN_FRONTEND=noninteractive apt-get install -y python python-apt
  <% end %>



provisioner:
  name: ansible_push
  playbook: site.yml
  sudo: true
  sudo_user: root
  ask_vault_pass: false
  idempotency_test: <%= ! ANSIBLE_CHECK_MODE %>
  fail_non_idempotent: true
  chef_bootstrap_url: nil
  # verbose level v, vv, vvv, vvvv
  verbose: 
  raw_arguments: --timeout=10 --diff

platforms:
  - name: debian-stretch
    lifecycle:
      pre_converge: >
        if [ -d /tmp/.<%= NAME %>_password-store ]; then
          rm -rf /tmp/.<%= NAME %>_password-store ;
        fi ;
        if [ -d /tmp/.<%= NAME %>_gnupg ]; then
          rm -rf /tmp/.<%= NAME %>_gnupg ;
        fi ;
        cp -a <%= PASSWORD_STORE %> /tmp/.<%= NAME %>_password-store ;
        cp -a <%= GNUPG %> /tmp/.<%= NAME %>_gnupg ;
        printf "\n\033[36;1m####### pre_converge_command done ########\033[0m\n\n"
    driver:
      box: debian/stretch64
      box_url: https://vagrantcloud.com/debian/stretch64
      box_check_update: true
      linked_clone: true
      kitchen_cache_directory: .kitchen_cache_directory
      provision: true
      vagrantfiles:
        - spec/kitchen/vagrant/vagrantfile_provision_add.rb
      synced_folders:
        - ['.', '/vagrant', 'disabled: true']

suites:
  - name: default
    provisioner:
      custom_instance_name: default-sandbox.local
      extra_vars:
        ansible_check_mode: <%= ANSIBLE_CHECK_MODE %>
        ansible_fqdn: default-sandbox.local
    verifier:
      inspec_tests:
        - spec/roles/common/sshd_spec.rb
  - name: password-store
    provisioner:
      playbook: spec/kitchen/playbooks/password-store.yml
      mygroup: password_store
      custom_instance_name: password-store-sandbox.local
      extra_vars:
        ansible_check_mode: <%= ANSIBLE_CHECK_MODE %>
        ansible_fqdn: password-store-sandbox.local
    verifier:
      inspec_tests:
        - spec/roles/password_store/push_spec.rb
      attributes:
        host_vars_path: password-store-sandbox.local

transport:
  username: <%= ENV['KITCHEN_USERNAME'] %>
  port: <%= ENV['KITCHEN_PORT'] %>
  backend: ssh
  keepalive: true
  compression: false
  verify_host_key: never
  verbose: warn
  keys_only: true
  request_pty: false
  timeout: 3
  non_interactive: true
<% unless ANSIBLE_CHECK_MODE %>

verifier:
  name: inspec
<% end %>
